<?xml version="1.0" encoding="UTF-8"?>  
<beans  
    xmlns="http://www.springframework.org/schema/beans"  
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  
    xmlns:p="http://www.springframework.org/schema/p"  
    xsi:schemaLocation="http://www.springframework.org/schema/beans   
http://www.springframework.org/schema/beans/spring-beans-3.0.xsd">  
  
  
  <!--
  
    In case of byType autowiring mode, bean id and reference name may be different. But there must be only one bean of a type.

	It internally uses setter injection.
	
	<bean id="b1" class="B"></bean>  
	<bean id="a" class="A" autowire="byType"></bean>  
	In this case, it works fine because you have created an instance of B type. It doesn't matter that you have different bean name than reference name.
	
	But, if you have multiple bean of one type, it will not work and throw exception.
	
	Let's see the code where are many bean of type B.
	
	<bean id="b1" class="B"></bean>  
	<bean id="b2" class="B"></bean>  
	<bean id="a" class="A" autowire="byName"></bean>  
	In such case, it will throw exception.
	
	Exception:
		No unique bean of type [B] is defined: expected single matching bean but found 2: [b1, b2]
	  
	 To avoid excpetion: we should use autowire-candidate="false" attribute
	 
	 <bean id="b1" class="B"></bean>  
	<bean id="b2" class="B" autowire-candidate="false"></bean>  
	<bean id="a" class="A" autowire="byType"></bean>  
	
    -->
  
	<!-- <bean id="b1" class="B"></bean>  
	<bean id="a" class="A" autowire="byType"></bean>   -->
	
	<bean id="b1" class="B"></bean>  
	<bean id="b2" class="B" autowire-candidate="false"></bean>  
	<bean id="a" class="A" autowire="byType"></bean>  
	
  
</beans>  